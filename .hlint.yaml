###########################################################################
# Settings
###########################################################################

- arguments: [-XTypeApplications, -XRecursiveDo]

# These are just too annoying
- ignore: { name: Redundant do }
- ignore: { name: Redundant bracket }
- ignore: { name: Redundant lambda }
- ignore: { name: Redundant $ }
- ignore: { name: Redundant flip }
- ignore: { name: Move brackets to avoid $ }

# Losing variable names can be not-nice
- ignore: { name: Eta reduce }
- ignore: { name: Avoid lambda }

# Humans know better
- ignore: { name: Use camelCase }
- ignore: { name: Use const }
- ignore: { name: Use section }
- ignore: { name: Use if }
- ignore: { name: Use notElem }
- ignore: { name: Use fromMaybe }
- ignore: { name: Use maybe }
- ignore: { name: Use fmap }
- ignore: { name: Use foldl }
- ignore: { name: "Use :" }
- ignore: { name: Use ++ }
- ignore: { name: Use || }
- ignore: { name: Use && }
- ignore: { name: 'Use ?~' }
- ignore: { name: Use <$> }

# There's no 'head' in Universum
- ignore: { name: Use head }

# Sometimes [Char] is okay (if it means "a set of characters")
- ignore: { name: Use String }

# We have 'whenJust' for this
- ignore: { name: Use Foldable.forM_ }

# Sometimes TemplateHaskell is needed to please stylish-haskell
- ignore: { name: Unused LANGUAGE pragma }

# Some 'data' records will be extended with more fields later,
# so they shouldn't be replaced with 'newtype' blindly
- ignore: { name: Use newtype instead of data }


###########################################################################
# Hints with 'id' should use 'identity'
###########################################################################

- warn: { lhs: any identity, rhs: or }
- warn: { lhs: all identity, rhs: and }
- warn: { lhs: (x >>= identity), rhs: join x }
- warn: { lhs: (identity =<< x), rhs: join x }
- warn: { lhs: mapM identity, rhs: sequence }
- warn: { lhs: mapM_ identity, rhs: sequence_ }
# This hint had to be given a name because we ignore "Use fromMaybe" above
# but we want to keep this one â€“ so we add single quotes here
- warn: { name: "Use 'fromMaybe'", lhs: maybe x identity, rhs: fromMaybe x }
- warn: { lhs: mapMaybe identity, rhs: catMaybes }
- warn: { lhs: maybe Nothing identity, rhs: join }


###########################################################################
# Various stuff
###########################################################################

- warn:
    name: "Avoid 'both'"
    lhs: both
    rhs: Control.Lens.each
    note: |
      If you use 'both' on a 2-tuple and later it's accidentally
      replaced with a longer tuple, 'both' will be silently applied to only
      the *last two elements* instead of failing with a type error.
        * If you want to traverse all elements of the tuple, use 'each'.
        * If 'both' is used on 'Either' here, replace it with 'chosen'.

- warn: { lhs: either (const True) (const False), rhs: isLeft }
- warn: { lhs: either (const False) (const True), rhs: isRight }

- warn: { lhs: Data.Map.toAscList (Data.Map.fromList x), rhs:
           Universum.sortWith fst x }
- warn: { lhs: Data.Map.toDescList (Data.Map.fromList x), rhs:
           Universum.sortWith (Down . fst) x }

- warn: { lhs: map fst &&& map snd, rhs: unzip }
