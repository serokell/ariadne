module Ariadne.Knit.Face where

import Prelude
import Control.Exception (SomeException)
import Text.PrettyPrint.ANSI.Leijen (Doc)
import Data.List.NonEmpty (NonEmpty)

import Ariadne.CommandId
import qualified Knit

-- The result of executing a knit command.
data KnitCommandResult components
  = KnitCommandSuccess (Knit.Value components)
  | KnitCommandEvalError (Knit.EvalError components)
  | KnitCommandProcError (NonEmpty Knit.CommandName)
  | KnitCommandException SomeException

-- | Events as generated by the Knit interpreter. They will be translated into
-- UI-compatible events in the 'Glue' module. They must be independent from the
-- UI and capture /what the backend can generate/, not what the frontend can
-- handle.
data KnitEvent components
  = KnitCommandResultEvent CommandId (KnitCommandResult components)
  | KnitCommandOutputEvent CommandId Doc

-- API for the knit interpreter.
data KnitFace components =
  KnitFace
    {
      -- Execute a knit expression asynchronously. Does not block unless the
      -- queue of commands is full (should not normally happen) -- the result of
      -- execution will be returned later as an application event.
      putKnitCommand :: Knit.Expr Knit.CommandName components -> IO CommandId
    }
