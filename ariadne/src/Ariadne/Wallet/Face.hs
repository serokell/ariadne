module Ariadne.Wallet.Face
  ( module Ariadne.Cardano.Face
  , WalletFace(..)
  , WalletEvent(..)
  , WalletSelection(..)
  , WalletSelectAction(..)
  ) where

import Universum

import Ariadne.Cardano.Face

data WalletSelection =
  WalletSelection
    { wsWalletIndex :: Word
    , wsPath :: [Word]
    }

data WalletSelectAction
  = WalletDeselect
  | WalletSelectByIndex { wsaWalletIndex :: Word, wsaPath :: [Word] }
  -- | WalletSelectByName { wsaWalletName :: Text, wsaPath :: [Word] } -- TODO

data WalletFace =
  WalletFace
    { walletAddAccount :: IO ()
    , walletRefreshUserSecret :: IO ()
    , walletSelect :: WalletSelectAction -> IO ()
    }

-- | Events as generated by the Wallet. They will be translated into
-- UI-compatible events in the 'Glue' module. They must be independent from the
-- UI and capture /what the backend can generate/, not what the frontend can
-- handle.
data WalletEvent =
  WalletUserSecretSetEvent UserSecret (Maybe WalletSelection)
